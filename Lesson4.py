# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv

def SalaryParamCheckAndTransform(var_list: list):        # функция для проверки вводимых параметров на соответсвие числу (целому или десятичной дроби)
    for i in range(len(var_list)):                       # и трансформации его элементов из строк в числа
        if var_list[i].isdigit():                        # проверка параметра на целое число
            var_list[i] = int(var_list[i])
        elif len(var_list[i].split('.')) == 2 and all(j.isdigit() for j in var_list[i].split('.')):    # проверка параметра на дробь
            var_list[i] = float(var_list[i])
        else:
            return False                                 # переданный параметр не целое число и не дробь

    return var_list

def CalculateSalary (hours_count, hour_cost, add_prize):           # функция расчета заработной платы сотрудника
    return hours_count * hour_cost + add_prize

li = list(argv[1:4])

if SalaryParamCheckAndTransform(li) != False:
    print(f'Выработка в часах: {li[0]}')
    print(f'Ставка в час: {li[1]}')
    print(f'Премия: {li[2]}')
    print(f'Заработная плата: {CalculateSalary(li[0], li[1], li[2])}')
else:
    print('Ошибка в переданных параметрах!')

# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

origin_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
print(origin_list)

new_list = (origin_list[i] for i in range(1, len(origin_list)) if origin_list[i] > origin_list[i - 1])
for elem in new_list:
    print(elem)


# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
# Подсказка: используйте функцию range() и генератор.

## я не очень понял итогом должен получиться генератор или внутри вычислений использоваться поэтому привожу 2 варианта
print((i for i in range(20, 241) if i % 20 == 0 or i % 21 == 0))

print(list(filter(lambda first_var: first_var % 20 == 0 or first_var % 21 == 0, (i for i in range(20, 241)))))

# 4. Представлен список чисел. Определите элементы списка, не имеющие повторений.
# Сформируйте итоговый массив чисел, соответствующих требованию.
# Элементы выведите в порядке их следования в исходном списке. Для выполнения задания обязательно используйте генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

origin_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
print(origin_list)

new_list = (elem for elem in origin_list if origin_list.count(elem) == 1)
for elem in new_list:
    print(elem)

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти чётные числа от 100 до 1000 (включая границы).
# Нужно получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce

print(reduce(lambda first_var, second_var: first_var * second_var, (i for i in range(100, 1001))))

# 6. Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее.
# Подсказка: используйте функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным. Предусмотрите условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем цикл.
# Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.

from itertools import count, cycle
from random import randrange

## Первый скрипт
def gen_from_number(start_value):
    for el in count(start_value):
        if el > start_value + 10:             # условие завершения цикла
            break
        yield el

initial_value = 10                            # стартовое значение
gen = gen_from_number(initial_value)
for elem in gen:
    print(elem)

## Второй скрипт
elem_count = 4
li = []
for i in range(1, elem_count + 1):
    li.append(randrange(1, 10))                 # чтобы было интереснее заполняю список, который в последствии будет повторяться, псевдослучайными целыми числами
print(li)

repeat_count = 10                              #  кол-во повторяющихся чисел
iter_number = 1

for elem in cycle(li):
    if iter_number > repeat_count:             # условие завершения
        break
    print(elem)
    iter_number += 1

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n).
# Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.


from itertools import count

def fact(end_number):                # функция-генератор значений факториалов
    result = 1
    if end_number > 0:
        for el in count(1):
            if el > end_number:
                break
            result *= el
            yield result
    else:
        yield result

end_number = int(input('Введите целое положительное число n, до значения которого будут генерироваться факториалы: ')) # до какого числа генерировать факториалы

for el in fact(end_number):
    print(el)

